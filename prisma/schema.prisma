// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma generate
// npx prisma migrate dev # if needed
// npx prisma db push --force-reset
// npx prisma db seed

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    firstName     String
    lastName      String
    password      String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    boards        Board[]
    tasks         Task[]
}

model Board {
    id       String   @id @default(cuid())
    slug     String   @unique
    ownerId  String
    members  User[]
    statuses Status[]
    tasks    Task[]
}

model Status {
    id      String  @id @default(cuid())
    name    String
    board   Board   @relation(fields: [boardId], references: [id])
    boardId String
    initial Boolean @default(false)
    final   Boolean @default(false)
    tasks   Task[]
}

model Task {
    id          String     @id @default(cuid())
    board       Board      @relation(fields: [boardId], references: [id])
    boardId     String
    status      Status?    @relation(fields: [statusId], references: [id])
    statusId    String?
    member      User?      @relation(fields: [userId], references: [id])
    userId      String?
    type        TaskType
    title       String
    description String?
    number      Int
    relation    Relation[] @relation("relation")
    rely        Relation[] @relation("rely")

    deleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Relation {
    id            String       @id @default(cuid())
    type          RelationType
    task          Task         @relation("relation", fields: [taskId], references: [id])
    taskId        String
    relatedTask   Task         @relation("rely", fields: [relatedTaskId], references: [id])
    relatedTaskId String
}

enum RelationType {
    RELATED_TO
    BLOCKED_BY
    BLOCKING
    DEPENDS_ON
    DEPENDING
}

enum TaskType {
    STORY
    TASK
    BUG
}
